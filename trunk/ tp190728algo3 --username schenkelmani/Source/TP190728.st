Object subclass: #EstrategiaEvaluacion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:17'!evaluarEn: numero	"Metodo abstracto que debe ser implementado por todas las estrategias de evaluacion."	self subclassResponsibility.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionConstantes	instanceVariableNames: 'constante'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionConstantes methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!getConstante 	"Devuelve el valor del atributo constante."	^constante ! !!EstrategiaEvaluacionConstantes methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!setConstante: numero	"Setea el atributo constante con el parametro recibido."	constante := numero.! !!EstrategiaEvaluacionConstantes methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 12:57'!evaluarEn: unNumero	"Recibe un numero. Evalua la funcion constante en ese numero (devuelve el valor de la constante)."	^ constante.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionConstantes class	instanceVariableNames: ''!!EstrategiaEvaluacionConstantes class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 16:04'!crearNueva: numero	"Crea una nueva estrategia. Le setea el valor al atributo constante y la devuelve."	| estrategia |	estrategia := EstrategiaEvaluacionConstantes new.	estrategia setConstante: numero.	^estrategia.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionDeDosFunciones	instanceVariableNames: 'funcionUno funcionDos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:39'!getFuncionDos	"Devuelve la funcion del atributo parametroDos."	^funcionDos  ! !!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:39'!getFuncionUno	"Devuelve la funcion del atributo funcionUno."	^funcionUno ! !!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:38'!setFuncionUno: funUno setFuncionDos: funDos	"Recibe dos funciones y las guarda en atributos de la instancia."	funcionUno  := funUno.	funcionDos  := funDos.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionDeUnaFuncion	instanceVariableNames: 'funcion'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDeUnaFuncion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:45'!getFuncion	"Devuelve la funcion."	^funcion! !!EstrategiaEvaluacionDeUnaFuncion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:45'!setFuncion: func	"Setea la funcion, guardandola en un atributo."	funcion := func! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionCoseno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionCoseno methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 00:51'!evaluarEn: numero	"Recibe un numero. Evalua la funcion en ese numero y luego calcula el coseno. Devuelve el resultado."	^((super getFuncion evaluarEn: numero) cos)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionCoseno class	instanceVariableNames: ''!!EstrategiaEvaluacionCoseno class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 00:45'!crearNueva: funcion	"Recibe una funcion como parametro. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	| temporary variable names estrategia |	estrategia := EstrategiaEvaluacionCoseno new.	estrategia setFuncion: funcion.	^estrategia.! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionDivision	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:35'!getDenominador 	"Devuelve la funcion denominador de la estrategia."	^super getFuncionDos.! !!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:37'!getNumerador 	"Devuelve la funcion numerador de la estrategia."	^super getFuncionUno.! !!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:40'!setNumerador: numerador setDenominador: denominador	"Recibe el numerador y denominador y lo setea a los atributos correspondientes."	super setFuncionUno: numerador  setFuncionDos: denominador.! !!EstrategiaEvaluacionDivision methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:37'!evaluarEn: numero	"Recibe un numero. Evalua las funciones numerador y denominador en ese numero y las divide. Devuelve el resultado."	"La linea de abajo podria tirar una excepcion ZeroDivide. Esto es algo tenido en cuenta y he decidido que en caso que el escenario se presente esa es la excepcion que debe ser lanzada."	^((super getFuncionUno evaluarEn: numero )/(super getFuncionDos  evaluarEn: numero))	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionDivision class	instanceVariableNames: ''!!EstrategiaEvaluacionDivision class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:01'!crearNuevaCon: numerador y: denominador	"Crea una nueva instancia de la estrategia. Recibe las funciones numerador y denominador y las asigna a los atributos respectivos. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionDivision new.	estrategia setNumerador: numerador setDenominador: denominador.	^estrategia.! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionExponencial	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionExponencial methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:13'!getBase 	"Devuelve la funcion base de la funcion exponencial."	^super getFuncionUno ! !!EstrategiaEvaluacionExponencial methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:14'!getExponente	"Devuelve la funcion exponente de la exponencial."	^super getFuncionDos! !!EstrategiaEvaluacionExponencial methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:12'!setBase: base setExponente: exponente	"Recibe una base y un exponente y los guarda como atributos."	super setFuncionUno: base setFuncionDos: exponente.! !!EstrategiaEvaluacionExponencial methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:32'!evaluarEn: numero	"Recibe un numero. Evalua las funciones base y exponente. Eleva la base al exponente y devuelve el valor obtenido."	^((super getFuncionUno evaluarEn: numero) raisedTo: (super getFuncionDos evaluarEn: numero))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionExponencial class	instanceVariableNames: ''!!EstrategiaEvaluacionExponencial class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 19:11'!crearNuevaCon: base y: exponente	"Crea una nueva instancia de la estrategia. Recibe las funciones base y exponente y las guarda en atributos de la nuvea instancia. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionExponencial new.	estrategia setBase: base setExponente: exponente.	^estrategia.! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionLogaritmoNatural	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionLogaritmoNatural methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 00:05'!evaluarEn: numero	"Recibe un numero"	| argumento |	argumento := (super getFuncion evaluarEn: numero).	(argumento = 0)ifTrue: 	[		ExcepcionLogaritmoNegativo new signal.	].	^argumento log:Float e.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionLogaritmoNatural class	instanceVariableNames: ''!!EstrategiaEvaluacionLogaritmoNatural class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 20:27'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instancia de la estrategia y le setea la funcion recibida. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionLogaritmoNatural new.	estrategia setFuncion: funcion.	^estrategia! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionMultiplicacion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:41'!getFactorDos 	"Devuelve la funcion del segundo factor."	^super getFuncionDos.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:41'!getFactorUno 	"Devuelve la funcion del primer factor."	^super getFuncionUno.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:40'!setProductoUno: factorUno setProductoDos: factorDos	"Recibe dos funciones como parametros y las guarda en atributos."	super setFuncionUno: factorUno setFuncionDos: factorDos.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:36'!evaluarEn: numero	"Recibe un numero. Evalua ambas funciones (factores) guardadas y multiplica los resultados. Devuelve el valor obtenido."	^((super getFuncionUno  evaluarEn: numero)*(super getFuncionDos evaluarEn: numero))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionMultiplicacion class	instanceVariableNames: ''!!EstrategiaEvaluacionMultiplicacion class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 16:39'!crearNuevaCon: productoUno y: productoDos	"Crea una nueva estrategia. Recibe los dos producos que son funciones y los guarda."	|  estrategia |	estrategia := EstrategiaEvaluacionMultiplicacion new.	estrategia setProductoUno: productoUno setProductoDos: productoDos.	^estrategia! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionResta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:15'!getFuncionARestar 	"Devuelve la funcion a restar."	^super getFuncionDos. ! !!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:15'!getFuncionInicial 	"Devuelve la funcion iniciall."	^super getFuncionUno.! !!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:15'!setFuncionInicial: funcionInicial setFuncionARestar: funcionARestar	"Recibe una funcion inicial y una funcion a restar y las guarda en atributos."	super setFuncionUno: funcionInicial setFuncionDos: funcionARestar! !!EstrategiaEvaluacionResta methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:16'!evaluarEn: numero	"Recibe un numero y evaluar las dos funciones en ese valor. Devuelve el resultado."	^((super getFuncionUno  evaluarEn: numero)-(super getFuncionDos evaluarEn: numero)).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionResta class	instanceVariableNames: 'fInicial'!!EstrategiaEvaluacionResta class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:03'!crearNuevaCon: funcionInicial y: funcionARestar 	"Recibe dos funciones. Crea una nueva instancia de la estrategia y guarda las funcion en atributos. La primera es la funcion inicial la segunda es la funcion a restar. Devuelve la estrategia."	|  estrategia |	estrategia := EstrategiaEvaluacionResta new.	estrategia setFuncionInicial: funcionInicial setFuncionARestar:funcionARestar.	^estrategia.! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionSeno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionSeno methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 00:38'!evaluarEn: numero	"Recibe un numero y evalua la funcion en ese numero y luego calcula el seno. Devuelve el valor obtenido."	^((super getFuncion evaluarEn: numero) sin)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionSeno class	instanceVariableNames: ''!!EstrategiaEvaluacionSeno class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 00:24'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instanci de la estrategia y le asigna la funcion. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionSeno new.	estrategia setFuncion: funcion.	^estrategia! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionSuma	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:18'!getFuncionDos 	"Devuelve la segunda funcion."	^super getFuncionDos.! !!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:18'!getFuncionUno 	"Devuelve la primer funcion."	^super getFuncionUno.	! !!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:17'!setFuncionUno: funcionUno setFuncionDos: funcionDos	"Recibe como parametros dos funciones y las guarda en atributos."	super setFuncionUno: funcionUno setFuncionDos: funcionDos.! !!EstrategiaEvaluacionSuma methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:18'!evaluarEn: numero	"Evalua la funcion en el valor recibido. Llama al metodo evaluar de las dos funciones que tiene la instancia."	^((super getFuncionUno  evaluarEn: numero) +(super getFuncionDos  evaluarEn: numero)). ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionSuma class	instanceVariableNames: ''!!EstrategiaEvaluacionSuma class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:04'!crearNuevaCon: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva instancia de la estrategia y asigna los valores de los atributos f1 = funcfuncionUno, f2 = funcionDos con los parametros recibidos. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionSuma new.	estrategia setFuncionUno: funcionUno setFuncionDos: funcionDos.	^estrategia.	! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionTangente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionTangente methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 01:34'!evaluarEn: numero	"Recibe un numero y evalua la funcion en ese numero y luego calcula la tangente. Devuelve el valor obtenido."	^((super getFuncion evaluarEn: numero) tan)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionTangente class	instanceVariableNames: ''!!EstrategiaEvaluacionTangente class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 01:20'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionTangente new.	estrategia setFuncion: funcion.	^estrategia! !ArithmeticError subclass: #ExcepcionArgumentoTangente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!ArithmeticError subclass: #ExcepcionLogaritmoNegativo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!