TestCase subclass: #EstrategiaEvaluacionConstantesTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionConstantesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/8/2010 20:15'!testCrearEstrategiaSeteaValorCorrecto 	""	| temporary variable names estrategia |	estrategia := EstrategiaEvaluacionConstantes crearNueva: 5.	self deny: (estrategia == nil).	self assert: (estrategia getConstante = 5).	! !!EstrategiaEvaluacionConstantesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 12:54'!testEvaluarEnValorDevuelveConstante	| estrategia evalCinco evalDos |	estrategia := EstrategiaEvaluacionConstantes crearNueva: 2.	evalCinco := estrategia evaluarEn: 5.	evalDos := estrategia evaluarEn: 2.	self assert: (evalCinco = 2).	self assert: (evalDos = 2).! !TestCase subclass: #EstrategiaEvaluacionCosenoTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionCosenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 00:42'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionCoseno crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).	! !!EstrategiaEvaluacionCosenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 01:05'!testEvaluarCosenoEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x + (Float pi /2)].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionCoseno crearNueva: funcion.	resultado := estrategia evaluarEn: Float pi * 7/2.	self assert: (resultado =  1)! !TestCase subclass: #EstrategiaEvaluacionDivisionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionDivisionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:55'!testCrearEstrategiaAsignaFuncionesCorrectas	| numerador denominador estrategia |	numerador := MockFuncion new.	denominador := MockFuncion new.	estrategia := EstrategiaEvaluacionDivision crearNuevaCon: numerador y: denominador.	self deny: (estrategia == nil).	self assert: (estrategia getNumerador == numerador).	self assert: (estrategia getDenominador == denominador).! !!EstrategiaEvaluacionDivisionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 20:03'!testDividirConDivisorCeroLanzaZeroDivide	| bloqueUno bloqueDos numerador denominador estrategia |	bloqueUno := ([:x | (x - 1) raisedToInteger: 3]).	bloqueDos := ([:x | (x + 1) raisedTo: 2 ]).	numerador := MockFuncion new.	numerador formaEvaluacion: bloqueUno.	denominador := MockFuncion new.	denominador  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionDivision crearNuevaCon: numerador  y: denominador.	self should: [estrategia evaluarEn: -1] raise: ZeroDivide.! !!EstrategiaEvaluacionDivisionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:11'!testDividirFuncionesDivideCorrectamente	| resultado bloqueUno bloqueDos numerador denominador estrategia |		bloqueUno := ([:x | (x - 1) raisedToInteger: 3]).	bloqueDos := ([:x | (x + 1) raisedTo: 2 ]).	numerador := MockFuncion new.	numerador formaEvaluacion: bloqueUno.	denominador := MockFuncion new.	denominador  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionDivision crearNuevaCon: numerador  y: denominador.	resultado :=	estrategia evaluarEn:8.	self	assert: (resultado = (343/81)).! !TestCase subclass: #EstrategiaEvaluacionExponencialTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionExponencialTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 18:56'!testCrearEstrategiaAsignaFuncionesCorrectas	| base exponente estrategia |	base := MockFuncion new.	exponente := MockFuncion new.	estrategia := EstrategiaEvaluacionExponencial crearNuevaCon: base y: exponente.	self deny: (estrategia == nil).	self assert: (estrategia getBase == base).	self assert: (estrategia getExponente == exponente).! !!EstrategiaEvaluacionExponencialTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 19:29'!testEvaluarEnValorConBaseConstanteDevuelveValorCorrecto 	| temporary variable names bloqueUno bloqueDos base exponente estrategia resultado |	bloqueUno := ([:x | 2]).	bloqueDos := ([:x | (x) raisedToInteger: 2]).	base := MockFuncion new.	base formaEvaluacion: bloqueUno.	exponente := MockFuncion new.	exponente  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionExponencial  crearNuevaCon: base  y: exponente.	resultado :=	estrategia evaluarEn:3.	self	assert: (resultado = 512).! !TestCase subclass: #EstrategiaEvaluacionLogaritmoNaturalTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionLogaritmoNaturalTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 20:31'!testCalcularLogaritmoNaturalFuncionaCorrectamente	| bloque funcion estrategia resultado |	bloque := ([:x | x raisedTo: 3]).	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionLogaritmoNatural crearNueva: funcion.	resultado :=	estrategia evaluarEn: Float e.	self	assert: (resultado = 3).! !!EstrategiaEvaluacionLogaritmoNaturalTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 20:27'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionLogaritmoNatural crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionLogaritmoNaturalTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 23:50'!testLogaritmoConArgumentoNegativoLanzaExcepcion	|  bloque funcion estrategia |	bloque := [:x | x-5 ].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionLogaritmoNatural crearNueva: funcion.	self should: [estrategia evaluarEn: 5] raise: ExcepcionLogaritmoNegativo.! !TestCase subclass: #EstrategiaEvaluacionMultiplicacionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionMultiplicacionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:42'!testCrearEstrategiaAsignaFuncionesCorrectas	| factorUno factorDos estrategia |	factorUno := MockFuncion new.	factorDos := MockFuncion new.	estrategia := EstrategiaEvaluacionMultiplicacion crearNuevaCon: factorUno y: factorDos.	self deny: (estrategia == nil).	self assert: (estrategia getFactorUno == factorUno).	self assert: (estrategia getFactorDos == factorDos).! !!EstrategiaEvaluacionMultiplicacionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:32'!testMultiplicarFuncionesMultiplicaCorrectamente	| resultado bloqueUno bloqueDos factorUno factorDos estrategia |		bloqueUno := ([:x | x + 4]).	bloqueDos := ([:x | x raisedTo: 0.5 ]).	factorUno := MockFuncion new.	factorUno formaEvaluacion: bloqueUno.	factorDos := MockFuncion new.	factorDos  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionMultiplicacion crearNuevaCon: factorUno  y: factorDos.	resultado :=	estrategia evaluarEn:4.	self	assert: (resultado = 16).! !TestCase subclass: #EstrategiaEvaluacionRestaTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionRestaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 15:51'!testCrearEstrategiaAsignaFuncionesCorrectas	| temporary variable names funcionInicial funcionARestar estrategia |	funcionInicial := MockFuncion new.	funcionARestar := MockFuncion new.	estrategia := EstrategiaEvaluacionResta crearNuevaCon: funcionInicial y: funcionARestar.	self deny: (estrategia == nil).	self assert: (estrategia getFuncionInicial == funcionInicial).	self assert: (estrategia getFuncionARestar == funcionARestar).! !!EstrategiaEvaluacionRestaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:28'!testRestarFuncionesRestaCorrectamente	| funcionInicial funcionARestar estrategia resultadoUno resultadoDos |	funcionInicial := MockFuncion new.	funcionInicial formaEvaluacion: [:x | (x cos) raisedToInteger: 2].	funcionARestar := MockFuncion new.	funcionARestar formaEvaluacion: [:x |  ((x sin) raisedToInteger: 2) * (-1)].	estrategia := EstrategiaEvaluacionResta crearNuevaCon: funcionInicial y: funcionARestar.	resultadoUno := estrategia evaluarEn: ((Float pi) /4).	resultadoDos := estrategia evaluarEn: ((Float pi) /6).	self	assert: (resultadoUno = 1).	self	assert: (resultadoDos = 1).! !TestCase subclass: #EstrategiaEvaluacionSenoTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionSenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 00:19'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionSeno crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).	! !!EstrategiaEvaluacionSenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 00:41'!testEvaluarSenoEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x + (Float pi /4)].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionSeno crearNueva: funcion.	resultado := estrategia evaluarEn: Float pi.	self assert: (resultado =  ((2 raisedTo: 0.5) / -2))! !TestCase subclass: #EstrategiaEvaluacionSumaTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionSumaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 15:45'!testCrearEstrategiaAsignaFuncionesCorrectas	|funcionUno funcionDos estrategia|	funcionUno  := MockFuncion new.	funcionDos  := MockFuncion new.	estrategia := EstrategiaEvaluacionSuma crearNuevaCon: funcionUno y: funcionDos. 	self	deny:  (estrategia == nil).	self	assert: (estrategia getFuncionUno == funcionUno).	self assert: (estrategia getFuncionDos == funcionDos).! !!EstrategiaEvaluacionSumaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 15:47'!testSumarFuncionesSumaCorrectamente	| resultado bloqueUno bloqueDos funcionUno funcionDos estrategia |		bloqueUno := ([:x | x]).	bloqueDos := ([:x | x raisedToInteger: 3]).	funcionUno := MockFuncion new.	funcionUno formaEvaluacion: bloqueUno.	funcionDos := MockFuncion new.	funcionDos  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionSuma crearNuevaCon: funcionUno  y: funcionDos.	resultado :=	estrategia evaluarEn:3.	self	assert: (resultado = 30).! !TestCase subclass: #EstrategiaEvaluacionTangenteTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionTangenteTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 01:21'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionTangente crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionTangenteTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 01:37'!testEvaluarTangenteEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x + (Float pi /2)].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionTangente crearNueva: funcion.	resultado := estrategia evaluarEn: Float pi / 2.	"Debido a cuestiones de redondeo no es igual a cero."	self assert: (resultado abs <  0.000000000001)! !!EstrategiaEvaluacionTangenteTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 01:40'!testEvaluarTangenteFueraDelDominioLanzaExcepcion	| bloque funcion estrategia |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionTangente crearNueva: funcion.	self should: [estrategia evaluarEn: Float pi / 2] raise: ExcepcionArgumentoTangente. 	self should: [estrategia evaluarEn: Float pi * 5/ 2 negated] raise: ExcepcionArgumentoTangente.	! !Object subclass: #MockFuncion	instanceVariableNames: 'bloqueEvaluacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!MockFuncion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 15:24'!formaEvaluacion: unBloque	"Recibe un block para mockear la estrategia de evaluacion. Lo guarda en un campo de instancia."	bloqueEvaluacion := unBloque. ! !!MockFuncion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 15:34'!evaluarEn: numero	"Evalua el bloque de evaluacion en el numero recibido como parametro y devuelve el valor obtenido."	^(bloqueEvaluacion value: numero).! !