TestCase subclass: #EstrategiaEvaluacionArcoCosenoTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionArcoCosenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 17:13'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionArcoCoseno crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionArcoCosenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 17:28'!testEvaluarArcoCosenoEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x - ((2 raisedTo: 0.5) / 2)].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionArcoCoseno crearNueva: funcion.	resultado := estrategia evaluarEn:((2 raisedTo: 0.5) / 2).	self assert: (resultado =  (Float pi / 2) )! !!EstrategiaEvaluacionArcoCosenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 17:22'!testEvaluarFueraDelDominioLanzaExcepcion	| bloque funcion estrategia resultado |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionArcoCoseno crearNueva: funcion.	self should: [estrategia evaluarEn: 2] raise: ExcepcionDominioFuncion.! !TestCase subclass: #EstrategiaEvaluacionArcoSenoTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionArcoSenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:12'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionArcoSeno crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionArcoSenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 17:09'!testEvaluarArcoSenoEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionArcoSeno crearNueva: funcion.	resultado := estrategia evaluarEn:((2 raisedTo: 0.5) / 2).	self assert: (resultado =  (Float pi / 4) )! !!EstrategiaEvaluacionArcoSenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 17:21'!testEvaluarFueraDelDominioLanzaExcepcion	| bloque funcion estrategia resultado |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionArcoSeno crearNueva: funcion.	self should: [estrategia evaluarEn: 2] raise: ExcepcionDominioFuncion.! !TestCase subclass: #EstrategiaEvaluacionConstantesTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionConstantesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/8/2010 20:15'!testCrearEstrategiaSeteaValorCorrecto 	""	| temporary variable names estrategia |	estrategia := EstrategiaEvaluacionConstantes crearNueva: 5.	self deny: (estrategia == nil).	self assert: (estrategia getConstante = 5).	! !!EstrategiaEvaluacionConstantesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 12:54'!testEvaluarEnValorDevuelveConstante	| estrategia evalCinco evalDos |	estrategia := EstrategiaEvaluacionConstantes crearNueva: 2.	evalCinco := estrategia evaluarEn: 5.	evalDos := estrategia evaluarEn: 2.	self assert: (evalCinco = 2).	self assert: (evalDos = 2).! !TestCase subclass: #EstrategiaEvaluacionCosenoTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionCosenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 00:42'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionCoseno crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).	! !!EstrategiaEvaluacionCosenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 01:05'!testEvaluarCosenoEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x + (Float pi /2)].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionCoseno crearNueva: funcion.	resultado := estrategia evaluarEn: Float pi * 7/2.	self assert: (resultado =  1)! !TestCase subclass: #EstrategiaEvaluacionDivisionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionDivisionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:55'!testCrearEstrategiaAsignaFuncionesCorrectas	| numerador denominador estrategia |	numerador := MockFuncion new.	denominador := MockFuncion new.	estrategia := EstrategiaEvaluacionDivision crearNuevaCon: numerador y: denominador.	self deny: (estrategia == nil).	self assert: (estrategia getNumerador == numerador).	self assert: (estrategia getDenominador == denominador).! !!EstrategiaEvaluacionDivisionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 20:03'!testDividirConDivisorCeroLanzaZeroDivide	| bloqueUno bloqueDos numerador denominador estrategia |	bloqueUno := ([:x | (x - 1) raisedToInteger: 3]).	bloqueDos := ([:x | (x + 1) raisedTo: 2 ]).	numerador := MockFuncion new.	numerador formaEvaluacion: bloqueUno.	denominador := MockFuncion new.	denominador  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionDivision crearNuevaCon: numerador  y: denominador.	self should: [estrategia evaluarEn: -1] raise: ZeroDivide.! !!EstrategiaEvaluacionDivisionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:11'!testDividirFuncionesDivideCorrectamente	| resultado bloqueUno bloqueDos numerador denominador estrategia |		bloqueUno := ([:x | (x - 1) raisedToInteger: 3]).	bloqueDos := ([:x | (x + 1) raisedTo: 2 ]).	numerador := MockFuncion new.	numerador formaEvaluacion: bloqueUno.	denominador := MockFuncion new.	denominador  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionDivision crearNuevaCon: numerador  y: denominador.	resultado :=	estrategia evaluarEn:8.	self	assert: (resultado = (343/81)).! !TestCase subclass: #EstrategiaEvaluacionExponencialTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionExponencialTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 18:56'!testCrearEstrategiaAsignaFuncionesCorrectas	| base exponente estrategia |	base := MockFuncion new.	exponente := MockFuncion new.	estrategia := EstrategiaEvaluacionExponencial crearNuevaCon: base y: exponente.	self deny: (estrategia == nil).	self assert: (estrategia getBase == base).	self assert: (estrategia getExponente == exponente).! !!EstrategiaEvaluacionExponencialTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 19:29'!testEvaluarEnValorConBaseConstanteDevuelveValorCorrecto 	| temporary variable names bloqueUno bloqueDos base exponente estrategia resultado |	bloqueUno := ([:x | 2]).	bloqueDos := ([:x | (x) raisedToInteger: 2]).	base := MockFuncion new.	base formaEvaluacion: bloqueUno.	exponente := MockFuncion new.	exponente  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionExponencial  crearNuevaCon: base  y: exponente.	resultado :=	estrategia evaluarEn:3.	self	assert: (resultado = 512).! !TestCase subclass: #EstrategiaEvaluacionFactorialTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionFactorialTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 14:34'!testCrearEstrategiaAsignaFuncionesCorrectas	|funcion estrategia|	funcion  := MockFuncion new.	estrategia := EstrategiaEvaluacionFactorial crearNueva: funcion.	self	deny:  (estrategia == nil).	self	assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionFactorialTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 15:17'!testEvaluarFactorialEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado resultadoDos |	bloque := [:x| x + 5].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionFactorial crearNueva: funcion.	resultado := estrategia evaluarEn: 1.	resultadoDos := estrategia evaluarEn: -5.	self assert: (resultado =  720).	self assert: (resultadoDos =  1).! !!EstrategiaEvaluacionFactorialTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 15:18'!testEvaluarFactorialEnValoresInvalidosLanzaExcepcion	| bloque funcion estrategia |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionFactorial crearNueva: funcion.	self should: [estrategia evaluarEn: 1.1] raise: ExcepcionFactorial. 	self should: [estrategia evaluarEn: -4] raise: ExcepcionFactorial.! !TestCase subclass: #EstrategiaEvaluacionFibonacciTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionFibonacciTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:50'!testCrearEstrategiaAsignaFuncionesCorrectas	|funcion estrategia|	funcion  := MockFuncion new.	estrategia := EstrategiaEvaluacionFibonacci crearNueva: funcion.	self	deny:  (estrategia == nil).	self	assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionFibonacciTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:58'!testEvaluarFactorialEnCeroDevuelveCero	| bloque funcion estrategia resultado |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionFibonacci crearNueva: funcion.	resultado := estrategia evaluarEn: 0.	self assert: (resultado =  0).! !!EstrategiaEvaluacionFibonacciTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:58'!testEvaluarFactorialEnNumeroDevuelveValorCorrecto	| bloque funcion estrategia resultado resultadoDos resultadoTres |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionFibonacci crearNueva: funcion.	resultado := estrategia evaluarEn: 16.	resultadoDos := estrategia evaluarEn: 8.	resultadoTres := estrategia evaluarEn: 3.	"http://en.wikipedia.org/wiki/Fibonacci_number"	self assert: (resultado =  987).	self assert: (resultadoDos =  21).	self assert: (resultadoTres =  2).! !!EstrategiaEvaluacionFibonacciTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:58'!testEvaluarFactorialEnUnoDevuelveUno	| bloque funcion estrategia resultado |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionFibonacci crearNueva: funcion.	resultado := estrategia evaluarEn: 1.	self assert: (resultado =  1).! !!EstrategiaEvaluacionFibonacciTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:56'!testEvaluarFactorialEnValoresInvalidosLanzaExcepcion	| bloque funcion estrategia |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionFibonacci crearNueva: funcion.	self should: [estrategia evaluarEn: 1.1] raise: ExcepcionDominioFuncion. 	self should: [estrategia evaluarEn: -4] raise: ExcepcionDominioFuncion.! !TestCase subclass: #EstrategiaEvaluacionLogaritmoNaturalTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionLogaritmoNaturalTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:49'!testCalcularLogaritmoNaturalFuncionaCorrectamente	| bloque funcion estrategia resultado |	bloque := ([:x | x raisedTo: 3]).	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionLogaritmoNatural crearNueva: funcion.	resultado :=	estrategia evaluarEn: Float e.	self	assert: (resultado = 3).! !!EstrategiaEvaluacionLogaritmoNaturalTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:44'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionLogaritmoNatural crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionLogaritmoNaturalTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:38'!testLogaritmoConArgumentoNegativoLanzaExcepcion	|  bloque funcion estrategia |	bloque := [:x | x-5 ].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionLogaritmoNatural crearNueva: funcion.	self should: [estrategia evaluarEn: 5] raise: ExcepcionDominioFuncion.! !TestCase subclass: #EstrategiaEvaluacionMultiplicacionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionMultiplicacionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:42'!testCrearEstrategiaAsignaFuncionesCorrectas	| factorUno factorDos estrategia |	factorUno := MockFuncion new.	factorDos := MockFuncion new.	estrategia := EstrategiaEvaluacionMultiplicacion crearNuevaCon: factorUno y: factorDos.	self deny: (estrategia == nil).	self assert: (estrategia getFactorUno == factorUno).	self assert: (estrategia getFactorDos == factorDos).! !!EstrategiaEvaluacionMultiplicacionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:32'!testMultiplicarFuncionesMultiplicaCorrectamente	| resultado bloqueUno bloqueDos factorUno factorDos estrategia |		bloqueUno := ([:x | x + 4]).	bloqueDos := ([:x | x raisedTo: 0.5 ]).	factorUno := MockFuncion new.	factorUno formaEvaluacion: bloqueUno.	factorDos := MockFuncion new.	factorDos  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionMultiplicacion crearNuevaCon: factorUno  y: factorDos.	resultado :=	estrategia evaluarEn:4.	self	assert: (resultado = 16).! !TestCase subclass: #EstrategiaEvaluacionRestaTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionRestaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 15:51'!testCrearEstrategiaAsignaFuncionesCorrectas	| temporary variable names funcionInicial funcionARestar estrategia |	funcionInicial := MockFuncion new.	funcionARestar := MockFuncion new.	estrategia := EstrategiaEvaluacionResta crearNuevaCon: funcionInicial y: funcionARestar.	self deny: (estrategia == nil).	self assert: (estrategia getFuncionInicial == funcionInicial).	self assert: (estrategia getFuncionARestar == funcionARestar).! !!EstrategiaEvaluacionRestaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:28'!testRestarFuncionesRestaCorrectamente	| funcionInicial funcionARestar estrategia resultadoUno resultadoDos |	funcionInicial := MockFuncion new.	funcionInicial formaEvaluacion: [:x | (x cos) raisedToInteger: 2].	funcionARestar := MockFuncion new.	funcionARestar formaEvaluacion: [:x |  ((x sin) raisedToInteger: 2) * (-1)].	estrategia := EstrategiaEvaluacionResta crearNuevaCon: funcionInicial y: funcionARestar.	resultadoUno := estrategia evaluarEn: ((Float pi) /4).	resultadoDos := estrategia evaluarEn: ((Float pi) /6).	self	assert: (resultadoUno = 1).	self	assert: (resultadoDos = 1).! !TestCase subclass: #EstrategiaEvaluacionSenoTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionSenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 00:19'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionSeno crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).	! !!EstrategiaEvaluacionSenoTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 00:41'!testEvaluarSenoEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x + (Float pi /4)].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionSeno crearNueva: funcion.	resultado := estrategia evaluarEn: Float pi.	self assert: (resultado =  ((2 raisedTo: 0.5) / -2))! !TestCase subclass: #EstrategiaEvaluacionSumaTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionSumaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 15:45'!testCrearEstrategiaAsignaFuncionesCorrectas	|funcionUno funcionDos estrategia|	funcionUno  := MockFuncion new.	funcionDos  := MockFuncion new.	estrategia := EstrategiaEvaluacionSuma crearNuevaCon: funcionUno y: funcionDos. 	self	deny:  (estrategia == nil).	self	assert: (estrategia getFuncionUno == funcionUno).	self assert: (estrategia getFuncionDos == funcionDos).! !!EstrategiaEvaluacionSumaTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 15:47'!testSumarFuncionesSumaCorrectamente	| resultado bloqueUno bloqueDos funcionUno funcionDos estrategia |		bloqueUno := ([:x | x]).	bloqueDos := ([:x | x raisedToInteger: 3]).	funcionUno := MockFuncion new.	funcionUno formaEvaluacion: bloqueUno.	funcionDos := MockFuncion new.	funcionDos  formaEvaluacion: bloqueDos.	estrategia := EstrategiaEvaluacionSuma crearNuevaCon: funcionUno  y: funcionDos.	resultado :=	estrategia evaluarEn:3.	self	assert: (resultado = 30).! !TestCase subclass: #EstrategiaEvaluacionTangenteTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!EstrategiaEvaluacionTangenteTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 01:21'!testCrearEstrategiaAsignaFuncionesCorrectas	| funcion estrategia |	funcion := MockFuncion new.	estrategia := EstrategiaEvaluacionTangente crearNueva: funcion.	self deny: (estrategia == nil).	self assert: (estrategia getFuncion == funcion).! !!EstrategiaEvaluacionTangenteTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 01:37'!testEvaluarTangenteEnValorDevuelveValorCorrecto	| bloque funcion estrategia resultado |	bloque := [:x| x + (Float pi /2)].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionTangente crearNueva: funcion.	resultado := estrategia evaluarEn: Float pi / 2.	"Debido a cuestiones de redondeo no es igual a cero."	self assert: (resultado abs <  0.000000000001)! !!EstrategiaEvaluacionTangenteTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:21'!testEvaluarTangenteFueraDelDominioLanzaExcepcion	| bloque funcion estrategia |	bloque := [:x| x].	funcion := MockFuncion new.	funcion formaEvaluacion: bloque.	estrategia := EstrategiaEvaluacionTangente crearNueva: funcion.	self should: [estrategia evaluarEn: Float pi / 2] raise: ExcepcionDominioFuncion. 	self should: [estrategia evaluarEn: Float pi * 5/ 2 negated] raise: ExcepcionDominioFuncion.	! !TestCase subclass: #ExtensionesNumerosTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!ExtensionesNumerosTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 16:04'!testEsNaturalOCeroDevuelveTrueConValoresCorrectos	self assert: (ExtensionesNumeros esNaturalOCero: 5).	self assert: (ExtensionesNumeros esNaturalOCero: 0).	self deny: (ExtensionesNumeros esNaturalOCero: -5).	self deny: (ExtensionesNumeros esNaturalOCero: 0.4).	self deny: (ExtensionesNumeros esNaturalOCero: -0.4).! !TestCase subclass: #FabricaDeFuncionesTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:28'!testCrearEstrategiaConstantePasandoValorNoNumericoTiraExcepcion	| fabrica  funcion |	fabrica := FabricaFunciones new.	funcion := MockFuncion new.	self should: [fabrica crearConstante: funcion]  raise: ExcepcionArgumentoInvalido.	! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:08'!testCrearFuncionArcoCosenoTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearArcoCoseno: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionArcoCoseno).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:05'!testCrearFuncionArcoSenoTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearArcoSeno: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionArcoSeno).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:35'!testCrearFuncionConstanteTieneEstrategiaEvaluacionCorrecta	| fabrica funcion |	fabrica := FabricaFunciones new.	funcion :=	fabrica crearConstante: 4.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionConstantes).	self	assert: (funcion getEstrategiaEvaluacion getConstante = 4).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:58'!testCrearFuncionCosenoTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearCoseno: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionCoseno).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:40'!testCrearFuncionDivisionTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcionDos funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcionDos := MockFuncion new.	funcion :=	fabrica crearDivision: funcionUno y: funcionDos.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionDivision).	self	assert: (funcion getEstrategiaEvaluacion getFuncionUno ==  funcionUno).	self	assert: (funcion getEstrategiaEvaluacion getFuncionDos == funcionDos).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:43'!testCrearFuncionExponencialTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcionDos funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcionDos := MockFuncion new.	funcion :=	fabrica crearExponencial: funcionUno y: funcionDos.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionExponencial).	self	assert: (funcion getEstrategiaEvaluacion getFuncionUno ==  funcionUno).	self	assert: (funcion getEstrategiaEvaluacion getFuncionDos == funcionDos).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:18'!testCrearFuncionFactorialTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearFactorial: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionFactorial).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:20'!testCrearFuncionFibonaccilTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearFibonacci: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionFibonacci).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:22'!testCrearFuncionLogaritmoNaturalTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearLogaritmoNatural: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionLogaritmoNatural).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:38'!testCrearFuncionMultiplicacionTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcionDos funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcionDos := MockFuncion new.	funcion :=	fabrica crearMultiplicacion: funcionUno y: funcionDos.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionMultiplicacion).	self	assert: (funcion getEstrategiaEvaluacion getFuncionUno ==  funcionUno).	self	assert: (funcion getEstrategiaEvaluacion getFuncionDos == funcionDos).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:24'!testCrearFuncionRestaTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcionDos funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcionDos := MockFuncion new.	funcion :=	fabrica crearResta: funcionUno y: funcionDos.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionResta).	self	assert: (funcion getEstrategiaEvaluacion getFuncionUno ==  funcionUno).	self	assert: (funcion getEstrategiaEvaluacion getFuncionDos == funcionDos).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:56'!testCrearFuncionSenoTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearSeno: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionSeno).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:22'!testCrearFuncionSumaTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcionDos funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcionDos := MockFuncion new.	funcion :=	fabrica crearSuma: funcionUno y: funcionDos.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionSuma).	self	assert: (funcion getEstrategiaEvaluacion getFuncionUno ==  funcionUno).	self	assert: (funcion getEstrategiaEvaluacion getFuncionDos == funcionDos ).! !!FabricaDeFuncionesTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 19:01'!testCrearFuncionTangenteTieneEstrategiaEvaluacionCorrecta	| fabrica funcionUno funcion |	fabrica := FabricaFunciones new.	funcionUno := MockFuncion new.	funcion :=	fabrica crearTangente: funcionUno.	self	assert: (funcion getEstrategiaEvaluacion isMemberOf: EstrategiaEvaluacionTangente).	self	assert: (funcion getEstrategiaEvaluacion getFuncion ==  funcionUno).! !TestCase subclass: #FuncionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!FuncionTestCase methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/11/2010 18:00'!testCrearFuncionConEstrategiaSeteaEstrategiaCorrecta	| funcion estrategia |	estrategia := MockEstrategia new.	funcion := Funcion crearConEstrategiaEvaluacion: estrategia.	self assert: (funcion getEstrategiaEvaluacion == estrategia).! !Object subclass: #MockEstrategia	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!Object subclass: #MockFuncion	instanceVariableNames: 'bloqueEvaluacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728-Tests'!!MockFuncion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 15:24'!formaEvaluacion: unBloque	"Recibe un block para mockear la estrategia de evaluacion. Lo guarda en un campo de instancia."	bloqueEvaluacion := unBloque. ! !!MockFuncion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 15:34'!evaluarEn: numero	"Evalua el bloque de evaluacion en el numero recibido como parametro y devuelve el valor obtenido."	^(bloqueEvaluacion value: numero).! !