Object subclass: #EstrategiaEvaluacion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:17'!evaluarEn: numero	"Metodo abstracto que debe ser implementado por todas las estrategias de evaluacion."	self subclassResponsibility.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionConstantes	instanceVariableNames: 'constante'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionConstantes methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!getConstante 	"Devuelve el valor del atributo constante."	^constante ! !!EstrategiaEvaluacionConstantes methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!setConstante: numero	"Setea el atributo constante con el parametro recibido."	constante := numero.! !!EstrategiaEvaluacionConstantes methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 12:57'!evaluarEn: unNumero	"Recibe un numero. Evalua la funcion constante en ese numero (devuelve el valor de la constante)."	^ constante.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionConstantes class	instanceVariableNames: ''!!EstrategiaEvaluacionConstantes class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 16:04'!crearNueva: numero	"Crea una nueva estrategia. Le setea el valor al atributo constante y la devuelve."	| estrategia |	estrategia := EstrategiaEvaluacionConstantes new.	estrategia setConstante: numero.	^estrategia.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionDeDosFunciones	instanceVariableNames: 'funcionUno funcionDos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:22'!evaluarEn: numero	"Metodo abstracto a implementar."	self subclassResponsibility.! !!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:39'!getFuncionDos	"Devuelve la funcion del atributo parametroDos."	^funcionDos  ! !!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:39'!getFuncionUno	"Devuelve la funcion del atributo funcionUno."	^funcionUno ! !!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:38'!setFuncionUno: funUno setFuncionDos: funDos	"Recibe dos funciones y las guarda en atributos de la instancia."	funcionUno  := funUno.	funcionDos  := funDos.! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionDivision	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:35'!getDenominador 	"Devuelve la funcion denominador de la estrategia."	^super getFuncionDos.! !!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:37'!getNumerador 	"Devuelve la funcion numerador de la estrategia."	^super getFuncionUno.! !!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:40'!setNumerador: numerador setDenominador: denominador	"Recibe el numerador y denominador y lo setea a los atributos correspondientes."	super setFuncionUno: numerador  setFuncionDos: denominador.! !!EstrategiaEvaluacionDivision methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:36'!evaluarEn: numero	"Recibe un numero. Evalua las funciones numerador y denominador en ese numero y las divide. Devuelve el resultado."	^((super getFuncionUno evaluarEn: numero )/(super getFuncionDos  evaluarEn: numero))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionDivision class	instanceVariableNames: ''!!EstrategiaEvaluacionDivision class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:01'!crearNuevaCon: numerador y: denominador	"Crea una nueva instancia de la estrategia. Recibe las funciones numerador y denominador y las asigna a los atributos respectivos. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionDivision new.	estrategia setNumerador: numerador setDenominador: denominador.	^estrategia.! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionMultiplicacion	instanceVariableNames: 'pUno pDos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:41'!getFactorDos 	"Devuelve la funcion del segundo factor."	^super getFuncionDos.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:41'!getFactorUno 	"Devuelve la funcion del primer factor."	^super getFuncionUno.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:40'!setProductoUno: factorUno setProductoDos: factorDos	"Recibe dos funciones como parametros y las guarda en atributos."	super setFuncionUno: factorUno setFuncionDos: factorDos.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:36'!evaluarEn: numero	"Recibe un numero. Evalua ambas funciones (factores) guardadas y multiplica los resultados. Devuelve el valor obtenido."	^((super getFuncionUno  evaluarEn: numero)*(super getFuncionDos evaluarEn: numero))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionMultiplicacion class	instanceVariableNames: ''!!EstrategiaEvaluacionMultiplicacion class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 16:39'!crearNuevaCon: productoUno y: productoDos	"Crea una nueva estrategia. Recibe los dos producos que son funciones y los guarda."	|  estrategia |	estrategia := EstrategiaEvaluacionMultiplicacion new.	estrategia setProductoUno: productoUno setProductoDos: productoDos.	^estrategia! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionResta	instanceVariableNames: 'fInicial fRestar'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:07'!getFuncionARestar 	"Devuelve el valor del atributo fRestar."	^fRestar ! !!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:05'!getFuncionInicial 	"Devuelve el valor del atributo fInicial."	^fInicial.! !!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:02'!setFuncionInicial: funcionInicial setFuncionARestar: funcionARestar	"Recibe una funcion inicial y una funcion a restar y las guarda en atributos."	fInicial := funcionInicial. 	fRestar := funcionARestar.! !!EstrategiaEvaluacionResta methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 16:22'!evaluarEn: numero	"Recibe un numero y evaluar las dos funciones en ese valor. Devuelve el resultado."	^((fInicial evaluarEn: numero)-(fRestar evaluarEn: numero)).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionResta class	instanceVariableNames: 'fInicial'!!EstrategiaEvaluacionResta class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:03'!crearNuevaCon: funcionInicial y: funcionARestar 	"Recibe dos funciones. Crea una nueva instancia de la estrategia y guarda las funcion en atributos. La primera es la funcion inicial la segunda es la funcion a restar. Devuelve la estrategia."	|  estrategia |	estrategia := EstrategiaEvaluacionResta new.	estrategia setFuncionInicial: funcionInicial setFuncionARestar:funcionARestar.	^estrategia.! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionSuma	instanceVariableNames: 'f1 f2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:02'!getFuncionDos 	"Devuelve la funcion del atributo f2."	^f2.! !!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!getFuncionUno 	"Devuelve la funcion del atributo f1."	^f1.	! !!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!setFuncionUno: funcionUno setFuncionDos: funcionDos	"Recibe como parametros dos funciones y las guarda en los atributos f1 y f2."	f1 := funcionUno.	f2 := funcionDos.! !!EstrategiaEvaluacionSuma methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 15:29'!evaluarEn: numero	"Evalua la funcion en el valor recibido. Llama al metodo evaluar de las dos funciones que tiene la instancia."	^((f1 evaluarEn: numero) +(f2 evaluarEn: numero)). ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionSuma class	instanceVariableNames: ''!!EstrategiaEvaluacionSuma class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:04'!crearNuevaCon: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva instancia de la estrategia y asigna los valores de los atributos f1 = funcfuncionUno, f2 = funcionDos con los parametros recibidos. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionSuma new.	estrategia setFuncionUno: funcionUno setFuncionDos: funcionDos.	^estrategia.	! !