Object subclass: #EstrategiaEvaluacion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:17'!evaluarEn: numero	"Metodo abstracto que debe ser implementado por todas las estrategias de evaluacion."	self subclassResponsibility.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionConstantes	instanceVariableNames: 'constante'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionConstantes methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!getConstante 	"Devuelve el valor del atributo constante."	^constante ! !!EstrategiaEvaluacionConstantes methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 16:03'!setConstante: numero	"Setea el atributo constante con el parametro recibido."	constante := numero.! !!EstrategiaEvaluacionConstantes methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 12:57'!evaluarEn: unNumero	"Recibe un numero. Evalua la funcion constante en ese numero (devuelve el valor de la constante)."	^ constante.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionConstantes class	instanceVariableNames: ''!!EstrategiaEvaluacionConstantes class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 16:04'!crearNueva: numero	"Crea una nueva estrategia. Le setea el valor al atributo constante y la devuelve."	| estrategia |	estrategia := EstrategiaEvaluacionConstantes new.	estrategia setConstante: numero.	^estrategia.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionDeDosFunciones	instanceVariableNames: 'funcionUno funcionDos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:39'!getFuncionDos	"Devuelve la funcion del atributo parametroDos."	^funcionDos  ! !!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:39'!getFuncionUno	"Devuelve la funcion del atributo funcionUno."	^funcionUno ! !!EstrategiaEvaluacionDeDosFunciones methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:38'!setFuncionUno: funUno setFuncionDos: funDos	"Recibe dos funciones y las guarda en atributos de la instancia."	funcionUno  := funUno.	funcionDos  := funDos.! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionDeUnaFuncion	instanceVariableNames: 'funcion'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDeUnaFuncion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:45'!getFuncion	"Devuelve la funcion."	^funcion! !!EstrategiaEvaluacionDeUnaFuncion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:45'!setFuncion: func	"Setea la funcion, guardandola en un atributo."	funcion := func! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionDeUnaFuncion class	instanceVariableNames: ''!!EstrategiaEvaluacionDeUnaFuncion class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 16:41'!crearNueva: clase conFuncion: funcion	"comment stating purpose of message"	| estrategia |	estrategia := clase new.	estrategia setFuncion: funcion.	^estrategia.! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionArcoCoseno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionArcoCoseno methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 17:28'!evaluarEn: numero	"Recibe un numero. Evalua la funcion en ese numero para obtener el argumento. Si el modulo del argumento es mayor o igual a uno lanza una excepcion ExcepcionDominioFuncion."	| argumento |	argumento := super getFuncion evaluarEn: numero.	(argumento abs >= 1)ifTrue:	[		ExcepcionDominioFuncion new signal.	].	^argumento arcCos.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionArcoCoseno class	instanceVariableNames: ''!!EstrategiaEvaluacionArcoCoseno class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:14'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instancia de la estrategia y setea la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).	! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionArcoSeno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionArcoSeno methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 17:26'!evaluarEn: numero	"Recibe un numero. Evalua la funcion en ese numero para obtener el argumento. Calcula el arco seno del argumento. Si el modulo del argumento es mayor a uno lanza una excepcion del tipo ExcepcionDominioFuncion."	| argumento |	argumento := self getFuncion evaluarEn: numero.	(argumento abs <= 1)ifFalse: 	[		ExcepcionDominioFuncion new signal.	].	^argumento arcSin.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionArcoSeno class	instanceVariableNames: ''!!EstrategiaEvaluacionArcoSeno class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:14'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionCoseno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionCoseno methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 00:51'!evaluarEn: numero	"Recibe un numero. Evalua la funcion en ese numero y luego calcula el coseno. Devuelve el resultado."	^((super getFuncion evaluarEn: numero) cos)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionCoseno class	instanceVariableNames: ''!!EstrategiaEvaluacionCoseno class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:15'!crearNueva: funcion	"Recibe una funcion como parametro. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionDivision	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:35'!getDenominador 	"Devuelve la funcion denominador de la estrategia."	^super getFuncionDos.! !!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:37'!getNumerador 	"Devuelve la funcion numerador de la estrategia."	^super getFuncionUno.! !!EstrategiaEvaluacionDivision methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:40'!setNumerador: numerador setDenominador: denominador	"Recibe el numerador y denominador y lo setea a los atributos correspondientes."	super setFuncionUno: numerador  setFuncionDos: denominador.! !!EstrategiaEvaluacionDivision methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:37'!evaluarEn: numero	"Recibe un numero. Evalua las funciones numerador y denominador en ese numero y las divide. Devuelve el resultado."	"La linea de abajo podria tirar una excepcion ZeroDivide. Esto es algo tenido en cuenta y he decidido que en caso que el escenario se presente esa es la excepcion que debe ser lanzada."	^((super getFuncionUno evaluarEn: numero )/(super getFuncionDos  evaluarEn: numero))	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionDivision class	instanceVariableNames: ''!!EstrategiaEvaluacionDivision class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 17:01'!crearNuevaCon: numerador y: denominador	"Crea una nueva instancia de la estrategia. Recibe las funciones numerador y denominador y las asigna a los atributos respectivos. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionDivision new.	estrategia setNumerador: numerador setDenominador: denominador.	^estrategia.! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionExponencial	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionExponencial methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:13'!getBase 	"Devuelve la funcion base de la funcion exponencial."	^super getFuncionUno ! !!EstrategiaEvaluacionExponencial methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:14'!getExponente	"Devuelve la funcion exponente de la exponencial."	^super getFuncionDos! !!EstrategiaEvaluacionExponencial methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:12'!setBase: base setExponente: exponente	"Recibe una base y un exponente y los guarda como atributos."	super setFuncionUno: base setFuncionDos: exponente.! !!EstrategiaEvaluacionExponencial methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:32'!evaluarEn: numero	"Recibe un numero. Evalua las funciones base y exponente. Eleva la base al exponente y devuelve el valor obtenido."	^((super getFuncionUno evaluarEn: numero) raisedTo: (super getFuncionDos evaluarEn: numero))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionExponencial class	instanceVariableNames: ''!!EstrategiaEvaluacionExponencial class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 19:11'!crearNuevaCon: base y: exponente	"Crea una nueva instancia de la estrategia. Recibe las funciones base y exponente y las guarda en atributos de la nuvea instancia. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionExponencial new.	estrategia setBase: base setExponente: exponente.	^estrategia.! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionFactorial	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionFactorial methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 16:08'!evaluarEn: numero	"Recibe un numero. Evalua la funcion en ese numero y calcula el factorial del resultado. Devuelve el resultado de factorial. Si el argumento del factorial no esta en el dominio lanza una excepcion ExcepcionFactorial."	| argumento |	argumento := ((super getFuncion) evaluarEn: numero).	(ExtensionesNumeros esNaturalOCero: argumento) ifFalse:	[		ExcepcionFactorial new signal.	].	^(argumento factorial).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionFactorial class	instanceVariableNames: ''!!EstrategiaEvaluacionFactorial class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:15'!crearNueva: funcion	"Recibe una funcion como parametro. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionFibonacci	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionFibonacci methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 16:58'!evaluarEn: numero	"Recibe un numero. Evalua la funcion en el numero para obtener el numero de la serie a obtener. Si no es natural o cero lanza una excepcion ExcepcionDominioFuncion."	| argumento num1 num2 res |	argumento := super getFuncion evaluarEn: numero.	(ExtensionesNumeros esNaturalOCero: argumento)ifFalse: 	[		ExcepcionDominioFuncion new signal.	].	(argumento = 0)ifTrue:	[		^0	].	(argumento = 1)ifTrue:	[		^1	].	num1 := 0.	num2 := 1.	argumento timesRepeat:	[		res := num1 + num2.		num2 := num1.		num1 := res	].	^res! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionFibonacci class	instanceVariableNames: ''!!EstrategiaEvaluacionFibonacci class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:15'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionLogaritmoNatural	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionLogaritmoNatural methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 16:50'!evaluarEn: numero	"Recibe un numero. Evalua la funcion en ese numero para obtener el argumento  y luego calcula el logaritmo natural. Devuelve el resultado. Si el argumento es menor o igual a cero lanza una excepcion del tipo ExcepcionDominioFuncion."	| argumento |	argumento := super getFuncion evaluarEn: numero.	(argumento <= 0)ifTrue:	[		ExcepcionDominioFuncion new signal.	].	^((super getFuncion evaluarEn: numero) log: Float e).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionLogaritmoNatural class	instanceVariableNames: ''!!EstrategiaEvaluacionLogaritmoNatural class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:15'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionMultiplicacion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:41'!getFactorDos 	"Devuelve la funcion del segundo factor."	^super getFuncionDos.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:41'!getFactorUno 	"Devuelve la funcion del primer factor."	^super getFuncionUno.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 17:40'!setProductoUno: factorUno setProductoDos: factorDos	"Recibe dos funciones como parametros y las guarda en atributos."	super setFuncionUno: factorUno setFuncionDos: factorDos.! !!EstrategiaEvaluacionMultiplicacion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 17:36'!evaluarEn: numero	"Recibe un numero. Evalua ambas funciones (factores) guardadas y multiplica los resultados. Devuelve el valor obtenido."	^((super getFuncionUno  evaluarEn: numero)*(super getFuncionDos evaluarEn: numero))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionMultiplicacion class	instanceVariableNames: ''!!EstrategiaEvaluacionMultiplicacion class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/10/2010 16:39'!crearNuevaCon: productoUno y: productoDos	"Crea una nueva estrategia. Recibe los dos producos que son funciones y los guarda."	|  estrategia |	estrategia := EstrategiaEvaluacionMultiplicacion new.	estrategia setProductoUno: productoUno setProductoDos: productoDos.	^estrategia! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionResta	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:15'!getFuncionARestar 	"Devuelve la funcion a restar."	^super getFuncionDos. ! !!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:15'!getFuncionInicial 	"Devuelve la funcion iniciall."	^super getFuncionUno.! !!EstrategiaEvaluacionResta methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:15'!setFuncionInicial: funcionInicial setFuncionARestar: funcionARestar	"Recibe una funcion inicial y una funcion a restar y las guarda en atributos."	super setFuncionUno: funcionInicial setFuncionDos: funcionARestar! !!EstrategiaEvaluacionResta methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:16'!evaluarEn: numero	"Recibe un numero y evaluar las dos funciones en ese valor. Devuelve el resultado."	^((super getFuncionUno  evaluarEn: numero)-(super getFuncionDos evaluarEn: numero)).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionResta class	instanceVariableNames: 'fInicial'!!EstrategiaEvaluacionResta class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:03'!crearNuevaCon: funcionInicial y: funcionARestar 	"Recibe dos funciones. Crea una nueva instancia de la estrategia y guarda las funcion en atributos. La primera es la funcion inicial la segunda es la funcion a restar. Devuelve la estrategia."	|  estrategia |	estrategia := EstrategiaEvaluacionResta new.	estrategia setFuncionInicial: funcionInicial setFuncionARestar:funcionARestar.	^estrategia.! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionSeno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionSeno methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 00:38'!evaluarEn: numero	"Recibe un numero y evalua la funcion en ese numero y luego calcula el seno. Devuelve el valor obtenido."	^((super getFuncion evaluarEn: numero) sin)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionSeno class	instanceVariableNames: ''!!EstrategiaEvaluacionSeno class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:15'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instanci de la estrategia y le asigna la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).! !EstrategiaEvaluacionDeDosFunciones subclass: #EstrategiaEvaluacionSuma	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:18'!getFuncionDos 	"Devuelve la segunda funcion."	^super getFuncionDos.! !!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:18'!getFuncionUno 	"Devuelve la primer funcion."	^super getFuncionUno.	! !!EstrategiaEvaluacionSuma methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/10/2010 19:17'!setFuncionUno: funcionUno setFuncionDos: funcionDos	"Recibe como parametros dos funciones y las guarda en atributos."	super setFuncionUno: funcionUno setFuncionDos: funcionDos.! !!EstrategiaEvaluacionSuma methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/10/2010 19:18'!evaluarEn: numero	"Evalua la funcion en el valor recibido. Llama al metodo evaluar de las dos funciones que tiene la instancia."	^((super getFuncionUno  evaluarEn: numero) +(super getFuncionDos  evaluarEn: numero)). ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionSuma class	instanceVariableNames: ''!!EstrategiaEvaluacionSuma class methodsFor: 'as yet unclassified' stamp: 'DamianSchenkelman 4/10/2010 16:04'!crearNuevaCon: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva instancia de la estrategia y asigna los valores de los atributos f1 = funcfuncionUno, f2 = funcionDos con los parametros recibidos. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionSuma new.	estrategia setFuncionUno: funcionUno setFuncionDos: funcionDos.	^estrategia.	! !EstrategiaEvaluacionDeUnaFuncion subclass: #EstrategiaEvaluacionTangente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionTangente methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 16:21'!evaluarEn: numero	"Recibe un numero y evalua la funcion en ese numero y luego calcula la tangente. Devuelve el valor obtenido."	| argumento |	argumento := (super getFuncion evaluarEn: numero).	(((argumento \\ (Float pi / 2)) = 0) & ((argumento \\ (Float pi) ~= 0)))ifTrue:	[		ExcepcionDominioFuncion  new signal.	].	^(argumento tan)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionTangente class	instanceVariableNames: ''!!EstrategiaEvaluacionTangente class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:15'!crearNueva: funcion	"Recibe una funcion. Crea una nueva instancia de la estrategia y le setea la funcion. Devuelve la estrategia."	^(super crearNueva: self conFuncion: funcion).! !EstrategiaEvaluacion subclass: #EstrategiaEvaluacionXALaN	instanceVariableNames: 'exponente'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!EstrategiaEvaluacionXALaN methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/11/2010 20:02'!getExponente	^exponente! !!EstrategiaEvaluacionXALaN methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/11/2010 20:01'!setExponente: numero	exponente := numero.! !!EstrategiaEvaluacionXALaN methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 20:08'!evaluarEn: numero	"Recibe un numero. Eleva el numero al exponente. Devuelve el resultado."	^(numero raisedTo: (self getExponente))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EstrategiaEvaluacionXALaN class	instanceVariableNames: ''!!EstrategiaEvaluacionXALaN class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 20:00'!crearConExponente: numero	"Recibe un numero. Crea una nueva instancia de la estrategia seteando como exponente al numero recibido. Devuelve la estrategia."	| estrategia |	estrategia := EstrategiaEvaluacionXALaN new.	estrategia setExponente: numero.	^estrategia.	! !Error subclass: #ExcepcionArgumentoInvalido	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!ArithmeticError subclass: #ExcepcionDominioFuncion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!Object subclass: #ExtensionesNumeros	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ExtensionesNumeros class	instanceVariableNames: ''!!ExtensionesNumeros class methodsFor: 'Conjuntos' stamp: 'DamianSchenkelman 4/11/2010 16:05'!esNaturalOCero: numero	"Recibe un numero y devuelve True si es natural o cero y false en caso contrario."	^((numero >= 0) & (numero - (numero asInteger) = 0))! !Object subclass: #FabricaFunciones	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:09'!crearArcoCoseno: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionArcoCoseno pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionArcoCoseno funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:07'!crearArcoSeno: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionArcoSeno pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionArcoSeno funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:37'!crearConstante: numero	"Recibe un numero. Crea una nueva EstrategiaEvaluacionConstantes pasando el numero y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion. Si el parametro recibido no es un numero lanza una excepcion ExcepcionArgumentoInvalido."	| estrategia funcion |	(numero isKindOf: Number)ifFalse:	[		ExcepcionArgumentoInvalido new signal.	].	estrategia := EstrategiaEvaluacionConstantes crearNueva: numero.	funcion := Funcion crearConEstrategiaEvaluacion: estrategia.	^funcion! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:07'!crearCoseno: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionCoseno pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionCoseno funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 18:44'!crearDivision: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva EstrategiaEvaluacionDivision pasando ambas funciones y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionDivision funcionUno: funcionUno funcionDos: funcionDos! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 18:44'!crearExponencial: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva EstrategiaEvaluacionExponencial pasando ambas funciones y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionExponencial funcionUno: funcionUno funcionDos: funcionDos! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:20'!crearFactorial: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionFactorial pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionFactorial funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:20'!crearFibonacci: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionFibonacci pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionFibonacci funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 18:56'!crearFuncionConEstrategiaEvaluacion: estrategiaEvaluacion funcion: funcion	"Recibe un tipo de estrategia y una funcion. Crea una estrategia y setea esa funcion. Crea una nueva funcion con la estrategia y devuelve la funcion."	| estrategia|	estrategia := estrategiaEvaluacion crearNueva: funcion.	^(Funcion crearConEstrategiaEvaluacion: estrategia).! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 18:34'!crearFuncionConEstrategiaEvaluacion: estrategiaEvaluacion funcionUno: funcionUno funcionDos: funcionDos	"Recibe un tipo de estrategia y dos funciones. Crea una estrategia y setea esas funciones. Crea una nueva funcion con la estrategia y devuelve la funcion."	| estrategia funcion |	estrategia := estrategiaEvaluacion crearNuevaCon: funcionUno y: funcionDos.	funcion := Funcion crearConEstrategiaEvaluacion: estrategia.	^funcion! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:22'!crearLogaritmoNatural: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionLogaritmoNatural pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionLogaritmoNatural funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 18:39'!crearMultiplicacion: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva EstrategiaEvaluacionMultiplicacion pasando ambas funciones y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionMultiplicacion funcionUno: funcionUno funcionDos: funcionDos	! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 18:36'!crearResta: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva EstrategiaEvaluacionResta pasando ambas funciones y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionResta funcionUno: funcionUno funcionDos: funcionDos! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:03'!crearSeno: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionSeno  pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionSeno funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 18:36'!crearSuma: funcionUno y: funcionDos	"Recibe dos funciones. Crea una nueva EstrategiaEvaluacionSuma pasando ambas funciones y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionSuma funcionUno: funcionUno funcionDos: funcionDos	! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 19:02'!crearTangente: funcion	"Recibe una funcion. Crea una nueva EstrategiaEvaluacionTangente pasando la funcion y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion."	^self crearFuncionConEstrategiaEvaluacion: EstrategiaEvaluacionTangente funcion: funcion.! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 20:25'!crearTerminoPolinomialConMultiplicador: multiplicador exponente: exponente	"Recibe un multiplicador y un exponente. Crea una multiplicacion entre una constante con el multiplicador y un termino X a la N con el exponente y la devuelve."	^(self crearMultiplicacion: (self crearConstante: multiplicador)  y: (self crearXALaNConExponente: exponente)).! !!FabricaFunciones methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 20:12'!crearXALaNConExponente: numero	"Recibe un numero. Crea una nueva EstrategiaEvaluacionXALaN pasando el numero y luego una Funcion con la estrategia de evaluacion creada previamente. Devuelve la funcion. Si el parametro recibido no es un numero lanza una excepcion ExcepcionArgumentoInvalido."	| estrategia funcion |	(numero isKindOf: Number)ifFalse:	[		ExcepcionArgumentoInvalido new signal.	].	estrategia := EstrategiaEvaluacionXALaN crearConExponente: numero.	funcion := Funcion crearConEstrategiaEvaluacion: estrategia.	^funcion! !Object subclass: #Funcion	instanceVariableNames: 'estrategiaEvaluacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TP190728'!!Funcion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/11/2010 18:00'!getEstrategiaEvaluacion	^estrategiaEvaluacion! !!Funcion methodsFor: 'Propiedades' stamp: 'DamianSchenkelman 4/11/2010 17:59'!setEstrategiaEvaluacion: estrategia	estrategiaEvaluacion := estrategia.! !!Funcion methodsFor: 'Evaluacion' stamp: 'DamianSchenkelman 4/11/2010 20:31'!evaluarEn: numero	"Recibe un numero. Llama a la estrategia de evaluacion para que evalue en ese numero."	^self getEstrategiaEvaluacion evaluarEn: numero.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Funcion class	instanceVariableNames: ''!!Funcion class methodsFor: 'Creacion' stamp: 'DamianSchenkelman 4/11/2010 17:57'!crearConEstrategiaEvaluacion: estrategia	"Recibe una estrategia de evaluacion. Crea una funcion y le setea esta estrategia de evaluacion. Devuelve la funcion."	| funcion |	funcion := self new.	funcion setEstrategiaEvaluacion: estrategia.	^funcion! !